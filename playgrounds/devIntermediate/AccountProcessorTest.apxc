@isTest
private class AccountProcessorTest {
	@isTest
    private static void testOneAccount() {
        // Create an account and 10 contacts
        Account a = new Account(Name = 'Account Processor Test Account');
        insert a;
        
        Contact c = new Contact(FirstName = 'Test',
                                LastName = 'Contact',
                                AccountID = a.ID);
        insert c;
        
        List<ID> ids = new List<ID>();
        ids.add(a.ID);
            
        Test.startTest();
        AccountProcessor.countContacts(ids);
        Test.stopTest();
        
        // get the account in question
        List<Account> accts = [SELECT ID, Number_Of_Contacts__c
                               FROM Account
                               WHERE ID = :a.ID];
        
        System.assertEquals(1, accts[0].Number_Of_Contacts__c, 'Number of Contacts should have been updated');
    }
    
    @isTest
    private static void testManyAccountsNoContacts() {
        List<ID> ids = createTestData(5, 0);
        
        Test.startTest();
        AccountProcessor.countContacts(ids);
        Test.stopTest();
        
        List<Account> accts = [SELECT ID, Name, Number_Of_Contacts__c
                               FROM Account
                               WHERE ID IN :ids];

        for (Account acc : accts) {
	        System.assertEquals(0, acc.Number_Of_Contacts__c, 'There should be no contacts for ' + acc.Name);
        }        
    }
    
    @isTest
    private static void testManyAccountsWithContacts() {
        Integer numContacts = 10;
        List<ID> ids = createTestData(5, numContacts);
        
        Test.startTest();
        AccountProcessor.countContacts(ids);
        Test.stopTest();
        
        List<Account> accts = [SELECT ID, Name, Number_Of_Contacts__c
                               FROM Account
                               WHERE ID IN :ids];

        for (Account acc : accts) {
	        System.assertEquals(numContacts, acc.Number_Of_Contacts__c, 'Number of contacts do not match for: ' + acc.Name);
        }        
    }
    /*
    @isTest
    private static void testManyAccountsManyContacts() {
        Integer numContacts = 200;
        List<ID> ids = createTestData(200, numContacts);
        
        Test.startTest();
        AccountProcessor.countContacts(ids);
        Test.stopTest();
        
        List<Account> accts = [SELECT ID, Name, Number_Of_Contacts__c
                               FROM Account
                               WHERE ID IN :ids];

        for (Account acc : accts) {
	        System.assertEquals(numContacts, acc.Number_Of_Contacts__c, 'Number of contacts do not match for: ' + acc.Name);
        }        
    }
    */
    
    private static List<ID> createTestData(Integer numAccounts, Integer contactsPerAccount) {
        List<ID> ids = new List<ID>();
        
        List<Contact> contactsToInsert = new List<Contact>();
        for (Integer i = 0; i < numAccounts; i++) {
            Account a = new Account(Name = 'Test Account ' + i);
            insert a;
            ids.add(a.ID);
            
            for (Integer j = 0; j < contactsPerAccount; j++) {
                System.debug('hellllooooo');
                contactsToInsert.add(new Contact(FirstName = 'Contact ' + j,
                                                 LastName = a.Name,
                                                 AccountID = a.ID));
            }
        }
        
        insert contactsToInsert;
        
        return ids;
    }
}
