@isTest
public class AnimalLocatorTest {
    @isTest
    public static void testGetAnimalNamebyId() {
        Test.setMock(HttpCalloutMock.class, new AnimalLocatorMock());
        
        // This causes a fake response to be sent
        // from the class that implements HttpCalloutMock. 
        String animalName = AnimalLocator.getAnimalNameById(1);
        
        System.assertEquals('chicken', animalName);
        /*
        // Verify that the response received contains fake values
        String contentType = response.getHeader('Content-Type');
        System.assert(contentType == 'application/json');
        
        String actualValue = response.getBody();
        System.debug(response.getBody());
        
        String expectedValue = '{"animal": {"id":1, "name":"chicken", "eats":"chicken food", "says":"cluck cluck"}}';
        System.assertEquals(expectedValue, actualValue);
        System.assertEquals(200, response.getStatusCode()); 
*/
    }
        /*
        // Create the mock response based on a static resource
        StaticResourceCalloutMock mock = new StaticResourceCalloutMock();
        mock.setStaticResource('GetAnimalResource');
        mock.setStatusCode(200);
        mock.setHeader('Content-Type', 'application/json;charset=UTF-8');
        
        // Associate the callout with a mock response
        Test.setMock(HttpCalloutMock.class, mock);
        
        // Call method to test
        //HttpResponse result = AnimalLocator.getAnimalNamebyId(2);
        String name = AnimalLocator.getAnimalNamebyId(2);
        System.debug('Animal name returned is \'' + name + '\'');
*/
        
        /*
        // Set mock callout class 
        Test.setMock(HttpCalloutMock.class, new AnimalsHttpCalloutMock()); 
        // This causes a fake response to be sent
        // from the class that implements HttpCalloutMock. 
        HttpResponse response = AnimalsCallouts.makePostCallout();
        // Verify that the response received contains fake values
        String contentType = response.getHeader('Content-Type');
        System.assert(contentType == 'application/json');
        String actualValue = response.getBody();
        System.debug(response.getBody());
        String expectedValue = '{"animals": ["majestic badger", "fluffy bunny", "scary bear", "chicken", "mighty moose"]}';
        System.assertEquals(expectedValue, actualValue);
        System.assertEquals(200, response.getStatusCode());
        */

/*        
        // Verify mock response is not null
        System.assertNotEquals(null,result, 'The callout returned a null response.');
        
        // Verify status code
        System.assertEquals(200,result.getStatusCode(), 'The status code is not 200.');
        
        // Verify content type   
        System.assertEquals('application/json;charset=UTF-8',
          result.getHeader('Content-Type'),
          'The content type value is not expected.');  
        
        // Verify the array contains 3 items     
        Map<String, Object> results = (Map<String, Object>) 
            JSON.deserializeUntyped(result.getBody());
        List<Object> animals = (List<Object>) results.get('animals');
        System.assertEquals(3, animals.size(), 'The array should only contain 3 items.');          
*/
}
